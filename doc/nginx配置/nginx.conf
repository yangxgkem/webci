###定义Nginx运行的用户和用户组
user www-data;

###nginx进程数, 最优设置为等于CPU总核心数
worker_processes 4;

###进程文件 存放nginx master pid
pid /run/nginx.pid;

###一个nginx进程打开的最多文件描述符数目，理论值应该是最多打开文件数（ulimit -n）与nginx进程数相除，
###但是nginx分配请求并不是那么均匀，所以最好与ulimit -n 的值保持一致。
###现在在linux 2.6内核下开启文件打开数为65535，worker_rlimit_nofile就相应应该填写65535。
###这是因为nginx调度时分配请求到进程并不是那么的均衡，所以假如填写10240，总并发量达到3-4万时就有进程可能超过10240了，这时会返回502错误
worker_rlimit_nofile 65535;

###工作模式与连接数上限
events {
        ###单个进程最大连接数(最大连接数=连接数*进程数)
        worker_connections 65536;
        
        ###告诉nginx收到一个新连接通知后接受尽可能多的连接 通常不用管这个参数
        # multi_accept on;

        ###复用客户端线程的轮询方法 use [ kqueue | rtsig | epoll | /dev/poll | select | poll ]; 
        ###epoll模型是Linux 2.6以上版本内核中的高性能网络I/O模型，如果跑在FreeBSD上面，就用kqueue模型。
        use epoll;
}

http {

        ##
        # Basic Settings
        ##

        sendfile on;
        tcp_nopush on;
        tcp_nodelay on;

        ###开启目录列表访问，合适下载服务器，默认关闭
        #autoindex on;

        ###长连接超时时间, 单位是秒
        keepalive_timeout 65;

        ###types_hash_max_size影响散列表的冲突率。types_hash_max_size越大，就会消耗更多的内存，但散列key的冲突率会降低，检索速度就更快。
        ###types_hash_max_size越小，消耗的内存就越小，但散列key的冲突率可能上升。
        types_hash_max_size 2048;
        
        ###关闭它并不会让nginx执行的速度更快，但它可以关闭在错误页面中的nginx版本数字，这样对于安全性是有好处的。
        server_tokens off;

        ###服务器名称哈希表每个页框的大小，这个指令的默认值依赖于cpu缓存
        server_names_hash_bucket_size 128;
        # server_name_in_redirect off;

        proxy_headers_hash_max_size 51200;
        proxy_headers_hash_bucket_size 6400;

        ###允许客户端请求的最大单文件大小, 默认不设置为1m
        client_max_body_size 2m;

        ###文件扩展名与文件类型映射表
        include /etc/nginx/mime.types;

        ###设置文件使用的默认的MIME-type
        default_type application/octet-stream;

        ##
        # Logging Settings
        ##

        access_log /var/log/nginx/access.log;
        error_log /var/log/nginx/error.log;

        ##
        # Gzip Settings
        ##

        ###开启gzip压缩输出
        gzip on;

        ###禁用IE6的gzip压缩
        gzip_disable "msie6";

        ###和http头有关系，加个vary头，给代理服务器用的，有的浏览器支持压缩，有的不支持，
        ###所以避免浪费不支持的也压缩，所以根据客户端的HTTP头来判断，是否需要压缩
        gzip_vary on;

        ###不压缩临界值, 大于1K的才压缩
        gzip_min_length 1k;

        ###nginx作为反向代理的时候启用
        # gzip_proxied any;

        ###gzip压缩比，1压缩比最小处理速度最快，9压缩比最大但处理速度最慢(传输快但比较消耗cpu)
        gzip_comp_level 6;

        ###默认配置开启即可
        gzip_buffers 16 8k;

        ###识别http的协议版本(1.0/1.1)
        gzip_http_version 1.1;

        ###压缩类型 "text/html"类型总是会被压缩的
        gzip_types text/plain text/css application/json application/x-javascript text/xml application/xml application/xml+rss text/javascript;


        ###负载均衡 每个请求按访问ip的hash结果分配，这样每个访客固定访问一个后端服务器，可以解决session的问题
        upstream webci_call{
                ip_hash;
                server 192.168.247.131:6001;
                server 192.168.247.131:6002;
        }
        ###负载均衡 资源访问 weight是权重, 可以根据机器配置定义权重, weigth参数表示权值, 权值越高被分配到的几率越大
        upstream assets_call{
                server 192.168.247.130:6001 weight=5;
                server 192.168.247.130:6002 weight=10;
        }

        ##
        # nginx-naxsi config
        ##
        # Uncomment it if you installed nginx-naxsi
        ##

        #include /etc/nginx/naxsi_core.rules;

        ##
        # nginx-passenger config
        ##
        # Uncomment it if you installed nginx-passenger
        ##

        #passenger_root /usr;
        #passenger_ruby /usr/bin/ruby;

        ##
        # Virtual Host Configs
        ##

        include /etc/nginx/conf.d/*.conf;
        include /etc/nginx/sites-enabled/*;
}